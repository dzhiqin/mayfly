<?xml version="1.0" encoding="UTF-8"?>
<configuration>
    <!-- %m输出的信息,%p日志级别,%t线程名,%d日期,%c类的全名,%i索引【从数字0开始递增】,,, -->
    <!-- appender是configuration的子节点，是负责写日志的组件。 -->
    <!-- ConsoleAppender：把日志输出到控制台 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符-->
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>
    <!-- RollingFileAppender：滚动记录文件，
			先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件
 	-->
    <!-- 以下的大概意思是：-->
    <!--1.先按日期存日志，日期变了，
            将前一天的日志文件名重命名为XXX%日期%索引，新的日志仍然是freeLog.logVO
    -->
    <!--2.如果日期没有发生变化，
        但是当前日志的文件大小超过1KB时，对当前日志进行分割 重命名-->
    <!--<appender name="freeLog" class="ch.qos.logback.core.rolling.RollingFileAppender">-->
        <!--<File>logVO/freeLog.logVO</File>-->
        <!--&lt;!&ndash; rollingPolicy:当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名。 &ndash;&gt;-->
        <!--&lt;!&ndash; TimeBasedRollingPolicy： 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动 &ndash;&gt;-->
        <!--<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">-->
            <!--&lt;!&ndash; 活动文件的名字会根据fileNamePattern的值，每隔一段时间改变一次 &ndash;&gt;-->
            <!--&lt;!&ndash; 文件名：logVO/freeLog.2018-08-23.0.logVO &ndash;&gt;-->
            <!--<fileNamePattern>logVO/freeLog.%d.%i.logVO</fileNamePattern>-->
            <!--&lt;!&ndash; 每产生一个日志文件，该日志文件的保存期限为30天 &ndash;&gt;-->
            <!--<maxHistory>30</maxHistory>-->
            <!--<timeBasedFileNamingAndTriggeringPolicy  class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">-->
                <!--&lt;!&ndash; maxFileSize:这是活动文件的大小，默认值是10MB，测试时可改成1KB看效果 &ndash;&gt;-->
                <!--<maxFileSize>10MB</maxFileSize>-->
            <!--</timeBasedFileNamingAndTriggeringPolicy>-->
        <!--</rollingPolicy>-->
        <!--<encoder>-->
            <!--&lt;!&ndash; pattern节点，用来设置日志的输入格式 &ndash;&gt;-->
            <!--<pattern>-->
                <!--%d %p (%file:%line\)- %m%n-->
            <!--</pattern>-->
            <!--&lt;!&ndash; 记录日志的编码:此处设置字符集 - &ndash;&gt;-->
            <!--<charset>UTF-8</charset>-->
        <!--</encoder>-->
    <!--</appender>-->

    <!--<appender name="custom" class="mayfly.common.logVO.appender.CustomLogAppender">-->
        <!--<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">-->
            <!--&lt;!&ndash;格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符&ndash;&gt;-->
            <!--<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>-->
            <!--<charset>UTF-8</charset>-->
        <!--</encoder>-->
        <!--<project>mayfly-sys</project>-->
    <!--</appender>-->

     <!--root logger日志级别-->
    <root level="WARN">
        <appender-ref ref="STDOUT" />
    </root>

    <!-- 指定项目中某个包，当有日志操作行为时的日志记录级别 -->
    <!-- mayfly为根包，也就是只要是发生在这个根包下面的所有日志操作行为的权限都是DEBUG -->
    <!-- 级别依次为【从高到低】：FATAL > ERROR > WARN > INFO > DEBUG > TRACE  -->
    <logger name="mayfly" level="DEBUG">
        <!--<appender-ref ref="STDOUT"/>-->
    </logger>
</configuration>

